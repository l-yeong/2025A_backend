package day08_20250709;

public class Example1 {
    public static void main(String[] args) {
        /*
        [ 생성자 ]
            1. 정의: 객체를 (new)생성 할때 사용되는 초기화 담당 함수
                * 초기화 : 초기에 값 대입, 처음에 로직처리
            2. 규칙
                1. 클래스명과 *무조건* 동일한 이름를 갖는다
                    클래스명 변수명 = new 생성자명();
                    * 만일 클래스명 이름이 다르면 *메소드* 취급 당한다
                2. 오버로드: 메소드/생성자는 매개변수의 개수/타입/순서가 다르면 동일한 이름으로 여러개 선언 가능
                            *변수명/식별자 동일한 이름을 가질수 없다.
                            즉] 메소드/생성자는 동일한 이름으로 여러게 만들수 없다.
                3. 종류
                    1) 기본생성자
                        정의: 생성자명( ){ }
                        사용: new 생성자명();
        */
        //[1] 기본 생성자를 이용한 객체 생성
            // 클래스명 변수명 = new 생성자명();
        Phone p1=new Phone();
            //-> 생성자 안써
            p1.model="갤럭시S25";
            p1.color="실버";

        //[2] 매개변수 갖는 생성자를 이용한 객체 생성
        Phone p2=new Phone("갤럭시S25","실버");

        //?? 생성자 목적: 객체 생성시 빠른 멤버변수 초기화
        //1. 객체 생성시 빠른 멤버변수 초기화
        //2. 협업 있어서 규칙적인 값 초기화
        //3. 단점: 규칙에 따른 복잡도 증가, 자유도 감소

        //[3]
        Phone p3= new Phone("아이폰","실버",1500000);

        //[4] 생성자에서 정의되지 않은 매개변수와 불일치는 오류발생
        //Phone p4= new Phone(1500000,"화이트","아이폰15")

    }//main e
}//class e

class Phone{
    //클래스 내 멤버
    //1. 멤버변수
    String model; //핸드폰 모델
    String color; //핸드폰 색상
    int price; //핸드폰 가격
    //2. 생성자
        //1) 기본 생성자
            // -> 클래스내 하나도 생성자가 없으면 자동으로 (컴파일될때) 생성된다.
            // -> 클래스내 하나 이상의 생성자가 있을때는 직접 기본생성자 정의
        Phone(){
            System.out.println("-->Phone 기본생성자 실행");
        }

        //2) 매개변수(해당 메소드/생성자를 호출시 외부로부터 들어오는 값)가 있는 생성자
            // -> 생성자는 매개변수는 있지만 반환값이 없다
        Phone(String pModel, String pColor){
            // --> 외부로부터 전달받은 인자값이 저장된 매개변수 값을 멤버변수에 저장
            model=pModel; // 내부변수=외부변수;
            color=pColor;
            price=1200000;  //초기값을 임의로 고정한다. 120만원
        }
        //3) 생성자의 오버로드
            //-> 기존 생성자와 매개변수의 타입/순서/개수 다르면 오버로드
        Phone(String model, String color,int price){
            // ---> 멤버변수: 객체내 변수
            // ---> 매개변수: 메소드/생성자가 사용되는 인수값 저장변수
            // 문제점: 이름이 같네
            // -> model=model //?? 누가 멤버고 누가 매개인지 모른다
            // 해결책: this키워드: 현재 메소드/생성자를 호출한 객체 가리킨다.
            this.model = model;
            this.color = color;
            this.price = price;

            //this 안쓰고 이름 다르게 할게요;
            //[관례적] 초기화 값은 멤버변수와 매개변수명을 동일하게 한다.

        }
    //3. 메소드
}//class e